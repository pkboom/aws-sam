AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: lambda

Parameters:
  PrivateSubnetId:
    Type: String
  SecurityGroupId:
    Type: String
  ElastiCacheRedisClusterEndpoint:
    Type: String

Resources:
  DmarcFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.handler
      Runtime: nodejs18.x
      MemorySize: 1536
      # Timeout: 300
      Timeout: 30
      Layers:
        - !Ref AppLayer
      # DeploymentPreference:
      #   Type: AllAtOnce
      #   Alarms:
      #     - Ref: RecordsFunctionErrorAlarm
      Architectures:
        - x86_64
      Environment:
        Variables:
          REDIS_HOST_ENDPOINT: !Ref ElastiCacheRedisClusterEndpoint
          MAILBUCKET_NAME: !Ref MailBucket
          KINESIS_ARN: !GetAtt KinesisStream.Arn
      Policies:
        # - S3ReadPolicy:
        - S3FullAccessPolicy:
            BucketName: !Ref MailBucket
        # - S3FullAccessPolicy:
        #     BucketName: !Ref RecordBucket
        - KinesisCrudPolicy:
            # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#kinesis-crud-policy
            StreamName: !Ref KinesisStream
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref PrivateSubnetId
      Events:
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-eventsource.html
        Invoker:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailQueue.Arn
            BatchSize: 1
            ScalingConfig:
              MaximumConcurrency: 70

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/building-layers.html
  AppLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: app specific deps
      ContentUri: layer
      CompatibleRuntimes:
        - nodejs18.x
    Metadata:
      BuildMethod: nodejs18.x

  MailBucket:
    Type: AWS::S3::Bucket

  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 199
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

  # Deliverystream:
  #   Type: AWS::KinesisFirehose::DeliveryStream
  #   Properties:
  #     DeliveryStreamName: !Ref AWS::StackName
  #     DeliveryStreamType: KinesisStreamAsSource
  #     AmazonopensearchserviceDestinationConfiguration:

  #     KinesisStreamSourceConfiguration:
  #       KinesisStreamARN: !GetAtt KinesisStream.Arn
  #       RoleARN: !GetAtt FirehoseDeliveryIAMRole.Arn

  FirehoseDeliveryIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: sts:AssumeRole

  FirehoseDeliveryIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join ['-', ['kinesis', 'fh', dmarc']]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - kinesis:DescribeStream
              - kinesis:GetShardIterator
              - kinesis:GetRecords
            Resource: !GetAtt KinesisStream.Arn
      Roles:
        - !Ref FirehoseDeliveryIAMRole
    DependsOn:
      - KinesisStream

  EmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 305 # should be greater that lambda timeout
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3

  # https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html
  DeadLetterQueue:
    Type: AWS::SQS::Queue

  # RecordsFunctionErrorAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     MetricName: Errors
  #     AlarmDescription: Fire alarm if more than 3 errors occur in any 60 second period
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 2
  #     ComparisonOperator: GreaterThanThreshold
  #     DatapointsToAlarm: 2
  #     EvaluationPeriods: 3
  #     Dimensions:
  #       - Name: Resource
  #         Value: !Sub '${RecordsFunction}:live'
  #       - Name: FunctionName
  #         Value: !Ref RecordsFunction
  #     TreatMissingData: notBreaching
  #     AlarmActions:
  #       - !Ref AlarmNotification

  # AlarmNotification:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     Subscription:
  #       - Endpoint: keunbae@inboxmonster.com
  #         Protocol: email
  #     TopicName: dmarc-alarm-notification

Outputs:
  DmarcFunction:
    Value: !GetAtt DmarcFunction.Arn
  DmarcFunctionIamRole:
    Description: 'Implicit IAM Role created for DmarcFunction function'
    Value: !GetAtt DmarcFunctionRole.Arn
  MailBucketName:
    Value: !Ref MailBucket
  KinesisStream:
    Value: !Ref KinesisStream
  EmailQueueUrl:
    Value: !Ref EmailQueue
  EmailQueueArn:
    Value: !GetAtt EmailQueue.Arn
