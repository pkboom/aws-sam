AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: lambda

Parameters:
  PrivateSubnetId:
    Type: String
  SecurityGroupId:
    Type: String
  ElastiCacheRedisClusterEndpoint:
    Type: String
  KinesisStreamName:
    Type: String
  KinesisStreamArn:
    Type: String
  DmarcBucketName:
    Type: String
  DmarcQueueArn:
    Type: String

Resources:
  DmarcFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: app.handler
      Runtime: nodejs18.x
      MemorySize: 4096
      Timeout: 600
      Layers:
        - !Ref AppLayer
      # DeploymentPreference:
      #   Type: AllAtOnce
      #   Alarms:
      #     - Ref: RecordsFunctionErrorAlarm
      Architectures:
        - x86_64
      Environment:
        Variables:
          CACHE_ENDPOINT: !Ref ElastiCacheRedisClusterEndpoint
          BUCKET_NAME: !Ref DmarcBucketName
          KINESIS_ARN: !Ref KinesisStreamArn
      Policies:
        # - S3ReadPolicy:
        - S3FullAccessPolicy:
            BucketName: !Ref DmarcBucketName
        # - S3FullAccessPolicy:
        #     BucketName: !Ref RecordBucket
        - KinesisCrudPolicy:
            # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#kinesis-crud-policy
            StreamName: !Ref KinesisStreamName
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupId
        SubnetIds:
          - !Ref PrivateSubnetId
      Events:
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-eventsource.html
        Invoker:
          Type: SQS
          Properties:
            Queue: !Ref DmarcQueueArn
            BatchSize: 1
            ScalingConfig:
              MaximumConcurrency: 50

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/building-layers.html
  AppLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: app specific deps
      ContentUri: layer
      CompatibleRuntimes:
        - nodejs18.x
    Metadata:
      BuildMethod: nodejs18.x

  # RecordsFunctionErrorAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     MetricName: Errors
  #     AlarmDescription: Fire alarm if more than 3 errors occur in any 60 second period
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 2
  #     ComparisonOperator: GreaterThanThreshold
  #     DatapointsToAlarm: 2
  #     EvaluationPeriods: 3
  #     Dimensions:
  #       - Name: Resource
  #         Value: !Sub '${RecordsFunction}:live'
  #       - Name: FunctionName
  #         Value: !Ref RecordsFunction
  #     TreatMissingData: notBreaching
  #     AlarmActions:
  #       - !Ref AlarmNotification

  # AlarmNotification:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     Subscription:
  #       - Endpoint: keunbae@inboxmonster.com
  #         Protocol: email
  #     TopicName: dmarc-alarm-notification

Outputs:
  DmarcFunction:
    Value: !GetAtt DmarcFunction.Arn
  DmarcFunctionIamRole:
    Description: 'Implicit IAM Role created for DmarcFunction function'
    Value: !GetAtt DmarcFunctionRole.Arn
