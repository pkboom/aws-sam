AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: create records from dmarc aggregate report

Resources:
  RecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Runtime: nodejs18.x
      Handler: app.handler
      MemorySize: 1536
      Timeout: 300
      Layers:
        - !Ref AppLayer
      AutoPublishAlias: live
      # DeploymentPreference:
      #   Type: AllAtOnce
      #   Alarms:
      #     - Ref: RecordsFunctionErrorAlarm
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref MailBucket
          KINESIS_ARN: !GetAtt KinesisStream.Arn
          # RECORDBUCKET_NAME: !Ref RecordBucket
      Policies:
        # - S3ReadPolicy:
        - S3FullAccessPolicy:
            BucketName: !Ref MailBucket
        # - S3FullAccessPolicy:
        #     BucketName: !Ref RecordBucket
        - KinesisCrudPolicy:
            # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-template-list.html#kinesis-crud-policy
            StreamName: !Ref KinesisStream
      Events:
        # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-eventsource.html
        Invoker:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailQueue.Arn
            BatchSize: 1
            ScalingConfig:
              MaximumConcurrency: 70

  # RecordsFunctionErrorAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     MetricName: Errors
  #     AlarmDescription: Fire alarm if more than 3 errors occur in any 60 second period
  #     Namespace: AWS/Lambda
  #     Period: 60
  #     Statistic: Sum
  #     Threshold: 2
  #     ComparisonOperator: GreaterThanThreshold
  #     DatapointsToAlarm: 2
  #     EvaluationPeriods: 3
  #     Dimensions:
  #       - Name: Resource
  #         Value: !Sub '${RecordsFunction}:live'
  #       - Name: FunctionName
  #         Value: !Ref RecordsFunction
  #     TreatMissingData: notBreaching
  #     AlarmActions:
  #       - !Ref AlarmNotification

  # AlarmNotification:
  #   Type: AWS::SNS::Topic
  #   Properties:
  #     Subscription:
  #       - Endpoint: keunbae@inboxmonster.com
  #         Protocol: email
  #     TopicName: dmarc-alarm-notification

  # https://serverlessland.com/patterns/s3-sqs-lambda-java?ref=search
  # RecordBucket:
  #   Type: AWS::S3::Bucket
  #   DependsOn:
  #     - RecordQueuePolicy
  #   Properties:
  #     NotificationConfiguration:
  #       QueueConfigurations:
  #         - Event: 's3:ObjectCreated:Put'
  #           Queue: !GetAtt RecordQueue.Arn
  #           # Filter:
  #           #   S3Key:
  #           #     Rules:
  #           #       - Name: suffix
  #           #         Value: '.png'

  # RecordQueuePolicy:
  #   Type: 'AWS::SQS::QueuePolicy'
  #   Properties:
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Id: QueuePolicy
  #       Statement:
  #         - Sid: Allow-SendMessage-To-Queue-From-S3-Event-Notification
  #           Effect: Allow
  #           Principal:
  #             Service: 's3.amazonaws.com'
  #           Action:
  #             - 'sqs:SendMessage'
  #           Resource: !GetAtt RecordQueue.Arn
  #     Queues:
  #       - !Ref RecordQueue

  # RecordQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     VisibilityTimeout: 215 # should be greater that lambda timeout
  #     RedrivePolicy:
  #       deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
  #       maxReceiveCount: 3

  MailBucket:
    Type: AWS::S3::Bucket

  EmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 305 # should be greater that lambda timeout
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3

  # https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html
  DeadLetterQueue:
    Type: AWS::SQS::Queue

  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/building-layers.html
  AppLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: app specific deps
      ContentUri: layer
      CompatibleRuntimes:
        - nodejs18.x
    Metadata:
      BuildMethod: nodejs18.x

  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      # StreamModeDetails:
      #   StreamMode: ON_DEMAND
      #   # StreamMode: PROVISIONED # If shardCount is set, this is default.
      ShardCount: 200
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis

Outputs:
  RecordsFunction:
    Description: 'RecordsFunction Function ARN'
    Value: !GetAtt RecordsFunction.Arn
  RecordsFunctionIamRole:
    Description: 'Implicit IAM Role created for Hello World function'
    Value: !GetAtt RecordsFunctionRole.Arn
  MailBucketName:
    Value: !Ref MailBucket
  EmailQueueUrl:
    Value: !Ref EmailQueue
  EmailQueueArn:
    Value: !GetAtt EmailQueue.Arn
  AppLayer:
    Description: 'AppLayer'
    Value: !Ref AppLayer
  # RecordBucketName:
  #   Value: !Ref RecordBucket
  # RecordQueueUrl:
  #   Value: !Ref RecordQueue
  DeadLetterQueueArn:
    Value: !GetAtt DeadLetterQueue.Arn
  KinesisStream:
    Description: 'Kinesis Stream'
    Value: !Ref KinesisStream
